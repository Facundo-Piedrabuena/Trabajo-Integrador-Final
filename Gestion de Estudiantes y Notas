#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define GDE "arch.dat"

//Struct de Materias
typedef struct Materia {
	char nombreM[50];
	struct Materia *sig;
} Materia;
//Struct de Alumnos
typedef struct Alumno {
	char nombre[50];
	int dni;
	char materiaAlum[50];
	struct Alumno *sig;
} Alumno;
//Struct de Notas
typedef struct Nota {
	char alumno[50];
	char materia[50];
	float valor;
	struct Nota *sig;
} Nota;
//Struct de promedio
typedef struct {
	char nombre[50];
	int dni;
	char materia[50];
	float promedio;
} AlumnoConPromedio;

typedef enum {MATERIA, ALUMNO, NOTA} TipoSubmenu;

//Declaraciones de funciones
Materia* agregarMateria(Materia*);
Materia* quitarMateria(Materia*, Alumno**, Nota**);
Alumno* agregarAlumno(Alumno*, Materia*);
Alumno* quitarAlumno(Alumno*,Nota**);
Nota* agregarNota(Nota*, Materia*, Alumno*);
Nota* quitarNota(Nota*, Materia*, Alumno*);
void mostrar(Materia*, Alumno*, Nota*);
void buscar(Alumno*, Nota*);
void mostrarPromediosOrdenados(Alumno*, Nota*);
void leerArchivo(FILE*, Materia**, Alumno**, Nota**);
void guardarArchivo(FILE*, Materia*, Alumno*, Nota*);
void liberarMaterias(Materia**);
void liberarAlumnos(Alumno**);
void liberarNotas(Nota**);
void aMayusculas(char[]);
int existeMateria(Materia*, char[]);
int existeAlumno(Alumno*, char[], int, char[]);
int existeDNI(Alumno*, int);
int verificardigitos();

//Menu principal del programa
void menu(int *opcion) {
	printf("\n============ MENU ============\n");
	printf("1. Agregar o quitar materias\n");
	printf("2. Agregar o quitar alumnos\n");
	printf("3. Agregar o quitar notas\n");
	printf("4. Buscar por nombre o DNI\n");
	printf("5. Mostrar registros\n");
	printf("6. Mostrar promedios ordenados\n");
	printf("7. Salir\n");
	printf("==============================\n");
	printf("Opcion: ");
	int digito=verificardigitos();      //redireccion a la funcion para verificar si la entrada de datos es de tipo entero
    if (digito==0){                    
        menu(opcion);
    }
	if (digito < 1 || digito > 7) {
		printf("Error. Ingrese un número válido entre 1 y 7\n");
		menu(opcion); // recursividad
	}*opcion=digito;
}
//Submenu accesible desde las opciones 1 a 3 del menu
void submenu(TipoSubmenu tipo, Materia **materias, Alumno **alumnos, Nota **notas) {
	int opcion;
	do {
		printf("\n1. Agregar\n2. Quitar\n3. Volver\nOpción: ");
		int digito=verificardigitos();
        if (digito==0){
            submenu(tipo,materias,alumnos,notas);
        }opcion=digito;
		switch (opcion) {
		case 1:
			if (tipo == MATERIA) *materias = agregarMateria(*materias);
			else if (tipo == ALUMNO) *alumnos = agregarAlumno(*alumnos, *materias);
			else if (tipo == NOTA) *notas = agregarNota(*notas, *materias, *alumnos);
			break;
		case 2:
			if (tipo == MATERIA) *materias = quitarMateria(*materias, alumnos, notas);
			else if (tipo == ALUMNO) *alumnos = quitarAlumno(*alumnos, notas);
			else if (tipo == NOTA) *notas = quitarNota(*notas, *materias, *alumnos);
			break;
		case 3:
			break;
		default:
			printf("\nOpción inválida\n");
		}
	} while (opcion != 3);
}
//Funcion para agregar materias
Materia* agregarMateria(Materia *lista) {
	char nombreM[50];
	printf("Ingrese nombre de la materia: ");
	scanf("%s", nombreM);
	aMayusculas(nombreM);
	
	if (existeMateria(lista, nombreM)) {
		printf("Error: La materia '%s' ya existe.\n", nombreM);
		return lista;
	}
	
	Materia *nuevo = malloc(sizeof(Materia));
	strcpy(nuevo->nombreM, nombreM);
	nuevo->sig = lista;
	printf("Materia agregada: %s\n", nombreM);
	return nuevo;
}
//Funcion para quitar materias
Materia* quitarMateria(Materia *lista, Alumno **alumnos, Nota **notas) {
    char nombreM[50];
    printf("Ingrese nombre de la materia a quitar: ");
    scanf("%s", nombreM);
    aMayusculas(nombreM);
    // 1) Quitar la materia de la lista de materias
    Materia *actual = lista, *anterior = NULL;
    while (actual && strcmp(actual->nombreM, nombreM) != 0) {
        anterior = actual;
        actual = actual->sig;
    }
    if (!actual) {
        printf("Materia no encontrada.\n");
        return lista;
    }

    if (!anterior) lista = actual->sig;
    else anterior->sig = actual->sig;
    printf("Materia %s eliminada.\n", actual->nombreM);
    free(actual);
    // 2) Quitar todos los alumnos de esa materia
    Alumno *a = *alumnos, *prevA = NULL;
    while (a) {
        if (strcmp(a->materiaAlum, nombreM) == 0) {
            Alumno *borrar = a;
            if (prevA) prevA->sig = a->sig;
            else *alumnos = a->sig;
            a = a->sig;
            free(borrar);
        } else {
            prevA = a;
            a = a->sig;
        }
    }
    // 3) Quitar todas las notas de esa materia
    Nota *n = *notas, *prevN = NULL;
    while (n) {
        if (strcmp(n->materia, nombreM) == 0) {
            Nota *borrar = n;
            if (prevN) prevN->sig = n->sig;
            else *notas = n->sig;
            n = n->sig;
            free(borrar);
        } else {
            prevN = n;
            n = n->sig;
        }
    }
    return lista;
}
//Funcion para agregar alumnos
Alumno* agregarAlumno(Alumno *lista, Materia *materias) {
	Alumno *nuevo = malloc(sizeof(Alumno));
	printf("Ingrese nombre del alumno: ");
	scanf("%s", nuevo->nombre);
	aMayusculas(nuevo->nombre);
    printf("Ingrese DNI: ");
	scanf("%d", &nuevo->dni);
    if (nuevo->dni < 10000000 || nuevo->dni > 99999999) {
    printf("Error: El DNI ingresado no posee 8 dígitos.\n");
    free(nuevo);
    return lista;
    }
    Alumno *aux = lista;
    while (aux) {
        if (aux->dni == nuevo->dni && strcmp(aux->nombre, nuevo->nombre) != 0) {
            printf("Error: El DNI ya existe y pertenece a otro alumno.\n");
            free(nuevo);
            return lista;
        }
        aux = aux->sig;
    }
	printf("Ingrese materia: ");
	scanf("%s", nuevo->materiaAlum);
	aMayusculas(nuevo->materiaAlum);
	if (!existeMateria(materias, nuevo->materiaAlum)) {
		printf("Error: Materia no existe.\n");
		free(nuevo);
		return lista;
	}
    aux = lista;
    while (aux) {
        if (aux->dni == nuevo->dni && strcmp(aux->materiaAlum, nuevo->materiaAlum) == 0) {
            printf("Error: Alumno ya registrado en esa materia.\n");
            free(nuevo);
            return lista;
        }
        aux = aux->sig;
    }
	nuevo->sig = lista;
	printf("Alumno agregado: %s (%d) en %s\n", nuevo->nombre, nuevo->dni, nuevo->materiaAlum);
	return nuevo;
}
//Funcion para quitar materias
Alumno* quitarAlumno(Alumno *lista, Nota **notas) {
    char nombre[50], materia[50];
    printf("Ingrese nombre del alumno a quitar: ");
    scanf("%s", nombre);
    aMayusculas(nombre);
    printf("Ingrese materia: ");
    scanf("%s", materia);
    aMayusculas(materia);

    Alumno *actual = lista, *anterior = NULL;           //Se busca y quita el alumno
    while (actual && (strcmp(actual->nombre, nombre) != 0 || strcmp(actual->materiaAlum, materia) != 0)) {
        anterior = actual;
        actual = actual->sig;
    }
    if (!actual) {
        printf("Alumno no encontrado en la materia.\n");
        return lista;
    }
    if (!anterior) lista = actual->sig;
    else anterior->sig = actual->sig;
    printf("Alumno %s eliminado de %s.\n", actual->nombre, actual->materiaAlum);
    free(actual);

    Nota *n = *notas, *prevN = NULL;            //Quito todas las notas de esa materia
    while (n) {
        if (strcmp(n->alumno, nombre) == 0 && strcmp(n->materia, materia) == 0) {
            Nota *borrar = n;
            if (prevN) prevN->sig = n->sig;
            else *notas = n->sig;
            n = n->sig;
            free(borrar);
        } else {
            prevN = n;
            n = n->sig;
        }
    }
    return lista;
}
//Funcion para agregar notas
Nota* agregarNota(Nota *lista, Materia *materias, Alumno *alumnos) {
	char alumno[50], materia[50];
	float valor;
	printf("Ingrese nombre del alumno: ");
	scanf("%s", alumno);
	aMayusculas(alumno);
	printf("Ingrese materia: ");
	scanf("%s", materia);
	aMayusculas(materia);
	
	Alumno *a = alumnos;
	int alumnoOK = 0;
	while (a) {
		if (strcmp(a->nombre, alumno) == 0 && strcmp(a->materiaAlum, materia) == 0) {
			alumnoOK = 1;
			break;
		}
		a = a->sig;
	}
	if (!alumnoOK) {
		printf("Alumno no encontrado en la materia.\n");
		return lista;
	}
	
	Materia *m = materias;
	int materiaOK = 0;
	while (m) {
		if (strcmp(m->nombreM, materia) == 0) {
			materiaOK = 1;
			break;
		}
		m = m->sig;
	}
	if (!materiaOK) {
		printf("Materia no encontrada.\n");
		return lista;
	}
	
	printf("Ingrese valor de la nota: ");
	scanf("%f", &valor);
	
	Nota *nuevo = malloc(sizeof(Nota));
	strcpy(nuevo->alumno, alumno);
	strcpy(nuevo->materia, materia);
	nuevo->valor = valor;
	nuevo->sig = lista;
	printf("Nota agregada: %s - %s - %.2f\n", alumno, materia, valor);
	return nuevo;
}
//Funcion para quitar notas
Nota* quitarNota(Nota *lista, Materia *materias, Alumno *alumnos) {
    char alumno[50], materia[50];
    float valor;
    printf("Ingrese nombre del alumno: ");
    scanf("%s", alumno);
    aMayusculas(alumno);
    printf("Ingrese materia: ");
    scanf("%s", materia);
    aMayusculas(materia);
    printf("Ingrese valor de la nota a eliminar: ");
    scanf("%f", &valor);
    Alumno *a = alumnos;                //Se verifica que el alumno exista en esa materia
    int alumnoOK = 0;
    while (a) {
        if (strcmp(a->nombre, alumno) == 0 && strcmp(a->materiaAlum, materia) == 0) {
            alumnoOK = 1;
            break;
        }
        a = a->sig;
    }
    if (!alumnoOK) {
        printf("Alumno no encontrado en la materia.\n");
        return lista;
    }
    Materia *m = materias;                      //Verifico que la materia exista
    int materiaOK = 0;
    while (m) {
        if (strcmp(m->nombreM, materia) == 0) {
            materiaOK = 1;
            break;
        }
        m = m->sig;
    }
    if (!materiaOK) {
        printf("Materia no encontrada.\n");
        return lista;
    }
    Nota *actual = lista, *anterior = NULL;             //Busco la nota exacta
    while (actual) {
        if (strcmp(actual->alumno, alumno) == 0 && strcmp(actual->materia, materia) == 0 && actual->valor == valor) {
            if (anterior == NULL) {                 //Si la encuentra se elimina
                lista = actual->sig;
            } else {
                anterior->sig = actual->sig;
            }
            printf("Nota eliminada: %s - %s - %.2f\n", alumno, materia, valor);
            free(actual);
            return lista;
            }
        anterior = actual;
        actual = actual->sig;
    }
    printf("No se encontró una nota con ese valor para ese alumno y materia.\n");
    return lista;
}
//Funcion que calcula el promedio de todas las notas de una misma materia
float calcularPromedio(Nota *notas, char nombre[], char materia[]) {
	float suma = 0;
	int cant = 0;
	while (notas) {
		if (strcmp(notas->alumno, nombre) == 0 && strcmp(notas->materia, materia) == 0) {
			suma += notas->valor;
			cant++;
		}
		notas = notas->sig;
	}
	return (cant == 0) ? 0 : suma / cant;
}

int copiarAlumnosAArray(Alumno *lista, AlumnoConPromedio arr[]) {
	int i = 0;
	while (lista) {
		strcpy(arr[i].nombre, lista->nombre);
		strcpy(arr[i].materia, lista->materiaAlum);
		arr[i].dni = lista->dni;
		arr[i].promedio = 0;
		lista = lista->sig;
		i++;
	}
	return i;
}
//Ordenamiento de tipo burbuja por nombres
void burbujaNombre(AlumnoConPromedio arr[], int n) {
	AlumnoConPromedio tmp;
	for (int i = 0; i < n-1; i++)
		for (int j = 0; j < n-i-1; j++)
			if (strcmp(arr[j].nombre, arr[j+1].nombre) > 0) {
				tmp = arr[j]; arr[j] = arr[j+1]; arr[j+1] = tmp;
	}
}
//Ordenamiento de tipo burbuja por DNI
void burbujaDNI(AlumnoConPromedio arr[], int n) {
	AlumnoConPromedio tmp;
	for (int i = 0; i < n-1; i++)
		for (int j = 0; j < n-i-1; j++)
			if (arr[j].dni > arr[j+1].dni) {
				tmp = arr[j]; arr[j] = arr[j+1]; arr[j+1] = tmp;
	}
}
//Funcion para mostrar promedios ordenados por nombre o DNI
void mostrarPromediosOrdenados(Alumno *listaAlumnos, Nota *listaNotas) {
	int opcion;
	printf("Ordenar promedios por:\n1) Nombre\n2) DNI\nOpción: ");
	int digito=verificardigitos();
    if (digito!=1 && digito!=2){
        if (digito!=0){printf("\nError, ingrese una opcion: 1 o 2\n\n");}
        mostrarPromediosOrdenados(listaAlumnos,listaNotas);
    }opcion=digito;
    int max = 1000;
	AlumnoConPromedio arr[max];
	int n = copiarAlumnosAArray(listaAlumnos, arr);
	if (n == 0) {
		printf("No hay alumnos para mostrar.\n");
		return;
	}
	for (int i = 0; i < n; i++)
		arr[i].promedio = calcularPromedio(listaNotas, arr[i].nombre, arr[i].materia);
    
	if (opcion == 2) burbujaDNI(arr, n);
	else burbujaNombre(arr, n);
	
	printf("\n%-20s %-10s %-20s %-10s\n", "Alumno", "DNI", "Materia", "Promedio");
	printf("-------------------------------------------------------------\n");
	for (int i = 0; i < n; i++)
		printf("%-20s %-10d %-20s %-10.2f\n", arr[i].nombre, arr[i].dni, arr[i].materia, arr[i].promedio);
}
//Funcion para mostrar el contenido cargado
void mostrar(Materia *materias, Alumno *alumnos, Nota *notas) {
    printf("\n========================= Mostrar =========================\n");
    printf("%-20s %-20s %-10s %-10s\n\n", "Materia", "Alumno", "DNI", "Nota");
    for (Materia *m = materias; m; m = m->sig) {
        int encontradoMateria = 0;
        for (Alumno *a = alumnos; a; a = a->sig) {
            if (strcmp(a->materiaAlum, m->nombreM) == 0) {
                encontradoMateria = 1;
                int notaEncontrada = 0;
                for (Nota *n = notas; n; n = n->sig) {
                    if (strcmp(n->alumno, a->nombre) == 0 && strcmp(n->materia, m->nombreM) == 0) {
                        printf("%-20s %-20s %-10d %-10.2f\n",
                               m->nombreM, a->nombre, a->dni, n->valor);
                        notaEncontrada = 1;
                    }
                }
                if (!notaEncontrada) {
                    printf("%-20s %-20s %-10d %-10s\n",
                           m->nombreM, a->nombre, a->dni, "-");
                }
            }
        }
        if (!encontradoMateria) {
            printf("%-20s %-20s %-10s %-10s\n",
                   m->nombreM, "-", "-", "-");
        }
    }
    printf("============================================================\n");
}
//Funcion para buscar un alumno por DNI o nombre
void buscar(Alumno *listaAlumnos, Nota *listaNotas) {
	int opcion;
	printf("Buscar por:\n1) Nombre\n2) DNI\nOpción: ");
	int digito=verificardigitos();
    if (digito!=1 && digito!=2){
        printf("\ndigito:%d",digito);
        if (digito!=0){printf("\nError, ingrese una opcion: 1 o 2\n\n");}
        mostrarPromediosOrdenados(listaAlumnos,listaNotas);
    }opcion=digito;
	if (opcion == 1) {
		char nombre[50];
		printf("Ingrese nombre: ");
		scanf("%s", nombre);
		aMayusculas(nombre);
		
		int encontrado = 0;
		for (Alumno *aux = listaAlumnos; aux; aux = aux->sig) {
			if (strcmp(aux->nombre, nombre) == 0) {
				printf("Alumno: %s, DNI: %d, Materia: %s\n", aux->nombre, aux->dni, aux->materiaAlum);
				for (Nota *n = listaNotas; n; n = n->sig) {
					if (strcmp(n->alumno, aux->nombre) == 0 && strcmp(n->materia, aux->materiaAlum) == 0)
						printf("Nota: %.2f\n", n->valor);
				}
				encontrado = 1;
			}
		}
		if (!encontrado) printf("Alumno no encontrado.\n");
		
	} else if (opcion == 2) {
		int dni;
		printf("Ingrese DNI: ");
		scanf("%d", &dni);
		
		int encontrado = 0;
		for (Alumno *aux = listaAlumnos; aux; aux = aux->sig) {
			if (aux->dni == dni) {
				printf("Alumno: %s, DNI: %d, Materia: %s\n", aux->nombre, aux->dni, aux->materiaAlum);
				for (Nota *n = listaNotas; n; n = n->sig) {
					if (strcmp(n->alumno, aux->nombre) == 0 && strcmp(n->materia, aux->materiaAlum) == 0)
						printf("Nota: %.2f\n", n->valor);
				}
				encontrado = 1;
			}
		}
		if (!encontrado) printf("Alumno no encontrado.\n");
	} else {
		printf("Opción inválida.\n");
	}
}
//Funcion para leer el archivo previamente creado
void leerArchivo(FILE *arch, Materia **materias, Alumno **alumnos, Nota **notas) {
	char tipo;
	while (fscanf(arch, " %c", &tipo) != EOF) {                 //Se carga cada lista con los datos guardados
		if (tipo == 'M') {
			Materia *nuevo = malloc(sizeof(Materia));
			fscanf(arch, " %49[^\n]", nuevo->nombreM);
			aMayusculas(nuevo->nombreM);
			nuevo->sig = *materias;
			*materias = nuevo;
		} else if (tipo == 'A') {
			Alumno *nuevo = malloc(sizeof(Alumno));
			fscanf(arch, " %49s %d %49s", nuevo->nombre, &nuevo->dni, nuevo->materiaAlum);
			aMayusculas(nuevo->nombre);
			aMayusculas(nuevo->materiaAlum);
			nuevo->sig = *alumnos;
			*alumnos = nuevo;
		} else if (tipo == 'N') {
			Nota *nuevo = malloc(sizeof(Nota));
			fscanf(arch, " %49s %49s %f", nuevo->alumno, nuevo->materia, &nuevo->valor);
			aMayusculas(nuevo->alumno);
			aMayusculas(nuevo->materia);
			nuevo->sig = *notas;
			*notas = nuevo;
		}
		fscanf(arch, "%*[^\n]\n"); // limpiar línea
	}
}
//Funcion para guardar el archivo con sus cambios
void guardarArchivo(FILE *arch, Materia *materias, Alumno *alumnos, Nota *notas) {
	for (Materia *m = materias; m; m = m->sig)
		fprintf(arch, "M %s\n", m->nombreM);
	for (Alumno *a = alumnos; a; a = a->sig)
		fprintf(arch, "A %s %d %s\n", a->nombre, a->dni, a->materiaAlum);
	for (Nota *n = notas; n; n = n->sig)
		fprintf(arch, "N %s %s %.2f\n", n->alumno, n->materia, n->valor);
}
//Funciones para liberar memoria
void liberarMaterias(Materia **lista) {
	Materia *aux;
	while (*lista) {
		aux = *lista;
		*lista = (*lista)->sig;
		free(aux);
	}
}
void liberarAlumnos(Alumno **lista) {
	Alumno *aux;
	while (*lista) {
		aux = *lista;
		*lista = (*lista)->sig;
		free(aux);
	}
}
void liberarNotas(Nota **lista) {
	Nota *aux;
	while (*lista) {
		aux = *lista;
		*lista = (*lista)->sig;
		free(aux);
	}
}
//Funcion para pasar minusculas a mayusculas
void aMayusculas(char s[]) {
	for (int i = 0; s[i]; i++) {
		if (s[i] >= 'a' && s[i] <= 'z') s[i] -= 32;
	}
}

int existeMateria(Materia *lista, char nombre[]) {
	while (lista) {
		if (strcmp(lista->nombreM, nombre) == 0)
			return 1;
		lista = lista->sig;
	}
	return 0;
}

int existeAlumno(Alumno *lista, char nombre[], int dni, char materia[]) {
	while (lista) {
		if (strcmp(lista->nombre, nombre) == 0 && lista->dni == dni && strcmp(lista->materiaAlum, materia) == 0)
			return 1;
		lista = lista->sig;
	}
	return 0;
}

int existeDNI(Alumno *lista, int dni) {
    while (lista) {
        if (lista->dni == dni)
            return 1;
        lista = lista->sig;
    }
    return 0;
}
//Funcion para verificar si la entrada de datos es de tipo entero
int verificardigitos() {
    int num;
    if (scanf("%d", &num) != 1||num==0) {
        while (getchar() != '\n');
        printf("\nError: debe ingresar un número entero distinto de cero.\n\n");
        return 0; // indica error
    }
    return num; // correcto
}
//FUNCION MAIN
int main() {
	int opcion = 0;
	Materia *listaMaterias = NULL;
	Alumno *listaAlumnos = NULL;
	Nota *listaNotas = NULL;
	
	FILE *arch = fopen(GDE, "r");       //Se abre un archivo de texto para lectura
	if (arch == NULL) {
		printf("Archivo no encontrado. Se creará uno nuevo al guardar.\n");
	} else {
		leerArchivo(arch, &listaMaterias, &listaAlumnos, &listaNotas);
		fclose(arch);
	}
	printf("\n\nBIENVENIDO AL SISTEMA DE GESTION DE ESTUDIANTES Y NOTAS\n");

	while (opcion != 7) {
		menu(&opcion);
		switch (opcion) {
		case 1:
            printf("\n\tSUBMENU MATERIA:");
			submenu(MATERIA, &listaMaterias, &listaAlumnos, &listaNotas);
			break;
		case 2:
            printf("\n\tSUBMENU ALUMNO:");
			submenu(ALUMNO, &listaMaterias, &listaAlumnos, &listaNotas);
			break;
		case 3:
            printf("\n\tSUBMENU NOTA:");
			submenu(NOTA, &listaMaterias, &listaAlumnos, &listaNotas);
			break;
		case 4:
			buscar(listaAlumnos, listaNotas);
			break;
		case 5:
			mostrar(listaMaterias, listaAlumnos, listaNotas);
			break;
		case 6:
			mostrarPromediosOrdenados(listaAlumnos, listaNotas);
			break;
		case 7:
			break;
		}
	}
	
	arch = fopen(GDE, "w");
	if (arch == NULL) {
		printf("Error al guardar archivo.\n");
	} else {
		guardarArchivo(arch, listaMaterias, listaAlumnos, listaNotas);  //se le envian las 3 listas modificadas a la
		fclose(arch);                                                   //funcion y se guarda el archivo
	}

	liberarMaterias(&listaMaterias);           //se utilizan estas 3 funciones para liberar espacio de memoria
	liberarAlumnos(&listaAlumnos);             //de las 3 listas cargadas antes de cerrar el programa
	liberarNotas(&listaNotas);
	
	return 0;
}
