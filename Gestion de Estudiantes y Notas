#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/* Ruta del archivo de texto log */
#define GDE "arch.dat"

/* ====== Estructura de materias ====== */
typedef struct Materia {
	char nombreM[50];
	struct Materia *sig;
} Materia;

/* ====== Estructura de alumnos ====== */
typedef struct Alumno {
	char nombre[50];
	int dni;
	char materiaAlum[50];
	struct Alumno *sig;
} Alumno;

/* ====== Estructura de notas ====== */
typedef struct Nota {
	char alumno[50];
	char materia[50];
	float valor;
	struct Nota *sig;
} Nota;

/* ====== Estructura auxiliar para ordenamientos ====== */
typedef struct {
	char nombre[50];
	int dni;
	char materia[50];
	float promedio;
} AlumnoConPromedio;

/* ====== Prototipos de funciones ====== */
Materia* agregarMateria(Materia*, FILE*);
Materia* quitarMateria(Materia*, FILE*);
Alumno* agregarAlumno(Alumno*, FILE*, Materia*);
Alumno* quitarAlumno(Alumno*, FILE*);
Nota* agregarNota(Nota*, FILE*, Materia*, Alumno*);
Nota* quitarNota(Nota*, FILE*, Materia*, Alumno*);

void materias(Materia**, FILE*);
void alumno(Alumno**, FILE*, Materia*);
void notas(Nota**, FILE*, Materia*, Alumno*);
void mostrar(Materia*, Alumno*, Nota*);
void buscar(Alumno*, Nota*);
void mostrarPromediosOrdenados(Alumno*, Nota*);
void leerArchivo(FILE *arch, Materia **materias, Alumno **alumnos, Nota **notas);
void guardarArchivo(FILE *arch, Materia *materias, Alumno *alumnos, Nota *notas);
int existeMateria(Materia *lista, char nombre[]);
int existeAlumno(Alumno *lista, char nombre[], int dni, char materia[]);
int existeNota(Nota *lista, char alumno[], char materia[]);
int dniExistente(Alumno *lista, int dni);

float calcularPromedio(Nota*, char[], char[]);
int copiarAlumnosAArray(Alumno*, AlumnoConPromedio[]);
void burbujaPromedios(AlumnoConPromedio[], int);
void burbujaNombre(AlumnoConPromedio[], int);
void burbujaDNI(AlumnoConPromedio[], int);
int busquedaBinariaNombre(AlumnoConPromedio[], int, char[]);
int busquedaBinariaDNI(AlumnoConPromedio[], int, int);

/* ====== Menú principal ====== */
void menu(int *opcion) {
	printf("\n===== MENU =====\n");
	printf("1. Agregar o quitar materias\n");
	printf("2. Agregar o quitar alumnos\n");
	printf("3. Agregar o quitar notas\n");
	printf("4. Buscar por nombre o DNI\n");
	printf("5. Mostrar registros\n");
	printf("6. Mostrar promedios ordenados\n");
	printf("7. Salir\n");
	printf("===============\n");
	scanf("%d", opcion);
	if (*opcion < 1 || *opcion > 7) {
		printf("Error. Ingrese un número válido entre 1 y 7\n");
		menu(opcion);
	}
}

/* ====== Función principal ====== -------------------------------------------------------------------------------------------------------------- */
int main() {
	int opcion = 0;
	Materia *listaMaterias = NULL;
	Alumno *listaAlumnos = NULL;
	Nota *listaNotas = NULL;
	
	FILE *arch;
	if ((arch = fopen(GDE, "a+")) == NULL) {
		printf("No se pudo abrir el archivo\n");
		return 1;
	}
	
	/* === Leer datos previos del archivo === */
	leerArchivo(arch, &listaMaterias, &listaAlumnos, &listaNotas);
	
	printf("BIENVENIDO AL SISTEMA DE GESTION DE ESTUDIANTES Y NOTAS\n");
	
	while (opcion != 7) {
		menu(&opcion);
		switch (opcion) {
		case 1:
			materias(&listaMaterias, arch);
			break;
		case 2:
			alumno(&listaAlumnos, arch, listaMaterias);
			break;
		case 3:
			notas(&listaNotas, arch, listaMaterias, listaAlumnos);
			break;
		case 4:
			buscar(listaAlumnos, listaNotas);
			break;
		case 5:
			mostrar(listaMaterias, listaAlumnos, listaNotas);
			break;
		case 6:
			mostrarPromediosOrdenados(listaAlumnos, listaNotas);
			break;
		case 7:
			break;
		}
	}
	
	guardarArchivo(arch, listaMaterias, listaAlumnos, listaNotas);
	
	/* Liberar memoria dinámica */
	while (listaMaterias) {
		Materia *tmp = listaMaterias;
		listaMaterias = listaMaterias->sig;
		free(tmp);
	}
	while (listaAlumnos) {
		Alumno *tmp = listaAlumnos;
		listaAlumnos = listaAlumnos->sig;
		free(tmp);
	}
	while (listaNotas) {
		Nota *tmp = listaNotas;
		listaNotas = listaNotas->sig;
		free(tmp);
	}
	
	return 0;
}

/* ====== Submenú de materias ====== */
void materias(Materia **lista, FILE *arch) {
	int opcion;
	do {
		printf("\n1. Agregar materia\n2. Quitar materia\n3. Volver\nOpción: ");
		scanf("%d", &opcion);
		switch (opcion) {
		case 1:
			*lista = agregarMateria(*lista, arch);
			break;
		case 2:
			*lista = quitarMateria(*lista, arch);
			break;
		case 3:
			break;
		default:
			printf("Opción inválida\n");
		}
	} while (opcion != 3);
}

/* ====== Submenú de alumnos ====== */
void alumno(Alumno **lista, FILE *arch, Materia *materias) {
	int opcion;
	do {
		printf("\n1. Agregar alumno\n2. Quitar alumno\n3. Volver\nOpción: ");
		scanf("%d", &opcion);
		switch (opcion) {
		case 1:
			*lista = agregarAlumno(*lista, arch, materias);
			break;
		case 2:
			*lista = quitarAlumno(*lista, arch);
			break;
		case 3:
			break;
		default:
			printf("Opción inválida\n");
		}
	} while (opcion != 3);
}

/* ====== Submenú de notas ====== */
void notas(Nota **lista, FILE *arch, Materia *materias, Alumno *alumnos) {
	int opcion;
	do {
		printf("\n1. Agregar nota\n2. Quitar nota\n3. Volver\nOpción: ");
		scanf("%d", &opcion);
		switch (opcion) {
		case 1:
			*lista = agregarNota(*lista, arch, materias, alumnos);
			break;
		case 2:
			*lista = quitarNota(*lista, arch, materias, alumnos);
			break;
		case 3:
			break;
		default:
			printf("Opción inválida\n");
		}
	} while (opcion != 3);
}

/* ====== Mostrar datos agrupados por materia, alumno y nota ====== */
void mostrar(Materia *listaMaterias, Alumno *listaAlumnos, Nota *listaNotas) {
	printf("\n========================= Mostrar =========================\n");
	printf("%-20s %-20s %-10s %-10s\n\n", "Materia:", "Alumno:", "DNI:", "Nota:");
	Materia *m = listaMaterias;
	while (m != NULL) {
		Alumno *a = listaAlumnos;
		int encontrado = 0;
		while (a != NULL) {
			if (strcmp(a->materiaAlum, m->nombreM) == 0) {
				encontrado = 1;
				printf("%-20s %-20s %-10d ", m->nombreM, a->nombre, a->dni);
				Nota *n = listaNotas;
				int notaEncontrada = 0;
				while (n != NULL) {
					if (strcmp(n->alumno, a->nombre) == 0 && strcmp(n->materia, m->nombreM) == 0) {
						printf("%-10.2f\n", n->valor);
						notaEncontrada = 1;
						break;
					}
					n = n->sig;
				}
				if (!notaEncontrada)
					printf("%-10s\n", "-");
			}
			a = a->sig;
		}
		if (!encontrado) {
			printf("%-20s %-20s %-10s %-10s\n", m->nombreM, "-", "-", "-");
		}
		m = m->sig;
	}
	printf("============================================================\n");
}

/* ====== Agregar una materia ====== */
Materia* agregarMateria(Materia *lista, FILE *arch) {
	char nombreM[50];
	printf("Ingrese nombre de la materia: ");
	scanf("%s", nombreM);
	
	// Validar si ya existe la materia
	if (existeMateria(lista, nombreM)) {
		printf("Error: La materia '%s' ya existe. No se agregará.\n", nombreM);
		return lista;
	}
	
	Materia *nuevo = (Materia*) malloc(sizeof(Materia));
	strcpy(nuevo->nombreM, nombreM);
	nuevo->sig = lista;
	fprintf(arch, "Materia: %s\n", nuevo->nombreM);
	printf("Materia agregada: %s\n", nuevo->nombreM);
	return nuevo;
}

/* ====== Quitar una materia ====== */
Materia* quitarMateria(Materia *lista, FILE *arch) {
	char nombreM[50];
	printf("Ingrese nombre de la materia a quitar: ");
	scanf("%s", nombreM);
	Materia *actual = lista, *anterior = NULL;
	while (actual != NULL && strcmp(actual->nombreM, nombreM) != 0) {
		anterior = actual;
		actual = actual->sig;
	}
	if (actual == NULL) {
		printf("Materia no encontrada.\n");
		return lista;
	}
	if (anterior == NULL)
		lista = actual->sig;
	else
		anterior->sig = actual->sig;
	fprintf(arch, "Materia quitada: %s\n", actual->nombreM);
	printf("Materia %s eliminada.\n", actual->nombreM);
	free(actual);
	return lista;
}

/* ====== Agregar un alumno con validación de materia ====== */
Alumno* agregarAlumno(Alumno *lista, FILE *arch, Materia *listaMaterias) {
	Alumno *nuevo = (Alumno*) malloc(sizeof(Alumno));
	printf("Ingrese nombre del alumno: ");
	scanf("%s", nuevo->nombre);
	printf("Ingrese DNI: ");
	scanf("%d", &nuevo->dni);
	
	// Validar si el DNI ya está en uso
	if (dniExistente(lista, nuevo->dni)) {
		printf("Error: Ya existe un alumno con el DNI %d. No se agregará.\n", nuevo->dni);
		free(nuevo);
		return lista;
	}
	
	printf("Ingrese nombre de la materia a la que pertenece: ");
	scanf("%s", nuevo->materiaAlum);
	
	// Verificar que exista la materia
	Materia *m = listaMaterias;
	int materiaEncontrada = 0;
	while (m != NULL) {
		if (strcmp(m->nombreM, nuevo->materiaAlum) == 0) {
			materiaEncontrada = 1;
			break;
		}
		m = m->sig;
	}
	
	if (!materiaEncontrada) {
		printf("Error: La materia '%s' no existe. No se agregará el alumno.\n", nuevo->materiaAlum);
		free(nuevo);
		return lista;
	}
	
	nuevo->sig = lista;
	fprintf(arch, "Alumno: %s DNI: %d Materia: %s\n", nuevo->nombre, nuevo->dni, nuevo->materiaAlum);
	printf("Alumno agregado: %s (%d) en materia %s\n", nuevo->nombre, nuevo->dni, nuevo->materiaAlum);
	return nuevo;
}

void leerArchivo(FILE *arch, Materia **materias, Alumno **alumnos, Nota **notas) {
	rewind(arch);  // Leer desde el inicio
	char linea[200];
	
	while (fgets(linea, sizeof(linea), arch)) {
		if (strncmp(linea, "Materia:", 8) == 0) {
			char nombreM[50];
			sscanf(linea, "Materia: %s", nombreM);
			if (!existeMateria(*materias, nombreM)) {
				Materia *nueva = (Materia *)malloc(sizeof(Materia));
				strcpy(nueva->nombreM, nombreM);
				nueva->sig = *materias;
				*materias = nueva;
			}
		}
		else if (strncmp(linea, "Alumno:", 7) == 0) {
			char nombre[50], materia[50];
			int dni;
			sscanf(linea, "Alumno: %s DNI: %d Materia: %s", nombre, &dni, materia);
			if (!existeAlumno(*alumnos, nombre, dni, materia)) {
				Alumno *nuevo = (Alumno *)malloc(sizeof(Alumno));
				strcpy(nuevo->nombre, nombre);
				nuevo->dni = dni;
				strcpy(nuevo->materiaAlum, materia);
				nuevo->sig = *alumnos;
				*alumnos = nuevo;
			}
		}
		else if (strncmp(linea, "Nota:", 5) == 0) {
			char alumno[50], materia[50];
			float valor;
			sscanf(linea, "Nota: Alumno=%s Materia=%s Valor=%f", alumno, materia, &valor);
			if (!existeNota(*notas, alumno, materia)) {
				Nota *nueva = (Nota *)malloc(sizeof(Nota));
				strcpy(nueva->alumno, alumno);
				strcpy(nueva->materia, materia);
				nueva->valor = valor;
				nueva->sig = *notas;
				*notas = nueva;
			}
		}
	}
}

int existeMateria(Materia *lista, char nombre[]) {
	while (lista != NULL) {
		if (strcmp(lista->nombreM, nombre) == 0)
			return 1;
		lista = lista->sig;
	}
	return 0;
}

int existeAlumno(Alumno *lista, char nombre[], int dni, char materia[]) {
	while (lista != NULL) {
		if (strcmp(lista->nombre, nombre) == 0 &&
			lista->dni == dni &&
			strcmp(lista->materiaAlum, materia) == 0)
			return 1;
		lista = lista->sig;
	}
	return 0;
}

int existeNota(Nota *lista, char alumno[], char materia[]) {
	while (lista != NULL) {
		if (strcmp(lista->alumno, alumno) == 0 &&
			strcmp(lista->materia, materia) == 0)
			return 1;
		lista = lista->sig;
	}
	return 0;
}

int dniExistente(Alumno *lista, int dni) {
	while (lista != NULL) {
		if (lista->dni == dni)
			return 1;
		lista = lista->sig;
	}
	return 0;
}

/* ====== Quitar un alumno con validación de materia ====== */
Alumno* quitarAlumno(Alumno *lista, FILE *arch) {
	char nombre[50], materia[50];
	printf("Ingrese nombre del alumno a quitar: ");
	scanf("%s", nombre);
	printf("Ingrese nombre de la materia: ");
	scanf("%s", materia);
	
	Alumno *actual = lista, *anterior = NULL;
	while (actual != NULL && (strcmp(actual->nombre, nombre) != 0 || strcmp(actual->materiaAlum, materia) != 0)) {
		anterior = actual;
		actual = actual->sig;
	}
	if (actual == NULL) {
		printf("Alumno no encontrado en la materia indicada.\n");
		return lista;
	}
	if (anterior == NULL)
		lista = actual->sig;
	else
		anterior->sig = actual->sig;
	
	fprintf(arch, "Alumno quitado: %s Materia: %s\n", actual->nombre, actual->materiaAlum);
	printf("Alumno %s eliminado de la materia %s.\n", actual->nombre, actual->materiaAlum);
	free(actual);
	return lista;
}

	
	/* ====== Agregar una nota con validaciones ====== */
	Nota* agregarNota(Nota *lista, FILE *arch, Materia *materias, Alumno *alumnos) {
		char alumno[50], materia[50];
		float valor;
		
		printf("Ingrese nombre del alumno: ");
		scanf("%s", alumno);
		printf("Ingrese nombre de la materia: ");
		scanf("%s", materia);
		
		/* Validar existencia del alumno en la materia */
		Alumno *a = alumnos;
		int alumnoOK = 0;
		while (a != NULL) {
			if (strcmp(a->nombre, alumno) == 0 && strcmp(a->materiaAlum, materia) == 0) {
				alumnoOK = 1;
				break;
			}
			a = a->sig;
		}
		if (!alumnoOK) {
			printf("Alumno no encontrado en esa materia. No se puede registrar la nota.\n");
			return lista;
		}
		
		/* Validar existencia de la materia */
		Materia *m = materias;
		int materiaOK = 0;
		while (m != NULL) {
			if (strcmp(m->nombreM, materia) == 0) {
				materiaOK = 1;
				break;
			}
			m = m->sig;
		}
		if (!materiaOK) {
			printf("Materia no encontrada. No se puede registrar la nota.\n");
			return lista;
		}
		
		printf("Ingrese valor de la nota: ");
		scanf("%f", &valor);
		
		Nota *nuevo = (Nota*) malloc(sizeof(Nota));
		strcpy(nuevo->alumno, alumno);
		strcpy(nuevo->materia, materia);
		nuevo->valor = valor;
		nuevo->sig = lista;
		
		fprintf(arch, "Nota: Alumno=%s Materia=%s Valor=%.2f\n", alumno, materia, valor);
		printf("Nota agregada: %s - %s - %.2f\n", alumno, materia, valor);
		
		return nuevo;
	}
	
	/* ====== Quitar una nota ====== */
	Nota* quitarNota(Nota *lista, FILE *arch, Materia *materias, Alumno *alumnos) {
		char alumno[50], materia[50];
		
		printf("Ingrese nombre del alumno: ");
		scanf("%s", alumno);
		printf("Ingrese nombre de la materia: ");
		scanf("%s", materia);
		
		/* Validar existencia del alumno en la materia */
		Alumno *a = alumnos;
		int alumnoOK = 0;
		while (a != NULL) {
			if (strcmp(a->nombre, alumno) == 0 && strcmp(a->materiaAlum, materia) == 0) {
				alumnoOK = 1;
				break;
			}
			a = a->sig;
		}
		if (!alumnoOK) {
			printf("Alumno no encontrado en esa materia. No se puede quitar la nota.\n");
			return lista;
		}
		
		/* Validar existencia de la materia */
		Materia *m = materias;
		int materiaOK = 0;
		while (m != NULL) {
			if (strcmp(m->nombreM, materia) == 0) {
				materiaOK = 1;
				break;
			}
			m = m->sig;
		}
		if (!materiaOK) {
			printf("Materia no encontrada. No se puede quitar la nota.\n");
			return lista;
		}
		
		Nota *actual = lista, *anterior = NULL;
		while (actual != NULL && (strcmp(actual->alumno, alumno) != 0 || strcmp(actual->materia, materia) != 0)) {
			anterior = actual;
			actual = actual->sig;
		}
		if (actual == NULL) {
			printf("Nota no encontrada.\n");
			return lista;
		}
		if (anterior == NULL)
			lista = actual->sig;
		else
			anterior->sig = actual->sig;
		
		fprintf(arch, "Nota quitada: Alumno=%s Materia=%s\n", alumno, materia);
		printf("Nota eliminada: %s - %s\n", alumno, materia);
		free(actual);
		return lista;
	}
	
	/* ====== Calcular promedio de un alumno en una materia ====== */
	float calcularPromedio(Nota *notas, char nombre[], char materia[]) {
		float suma = 0;
		int cantidad = 0;
		
		while (notas != NULL) {
			if (strcmp(notas->alumno, nombre) == 0 && strcmp(notas->materia, materia) == 0) {
				suma += notas->valor;
				cantidad++;
			}
			notas = notas->sig;
		}
		
		return (cantidad == 0) ? 0 : suma / cantidad;
	}
	
	/* ====== Copiar alumnos de la lista a un arreglo auxiliar ====== */
	int copiarAlumnosAArray(Alumno *lista, AlumnoConPromedio arr[]) {
		int i = 0;
		while (lista != NULL) {
			strcpy(arr[i].nombre, lista->nombre);
			strcpy(arr[i].materia, lista->materiaAlum);
			arr[i].dni = lista->dni;
			arr[i].promedio = 0;
			lista = lista->sig;
			i++;
		}
		return i;
	}
	
	/* ====== Ordenamiento burbuja por nombre (ascendente) ====== */
	void burbujaNombre(AlumnoConPromedio arr[], int n) {
		AlumnoConPromedio tmp;
		for (int i = 0; i < n - 1; i++)
			for (int j = 0; j < n - i - 1; j++)
				if (strcmp(arr[j].nombre, arr[j + 1].nombre) > 0) {
					tmp = arr[j];
					arr[j] = arr[j + 1];
					arr[j + 1] = tmp;
		}
	}
	
	/* ====== Ordenamiento burbuja por DNI (ascendente) ====== */
	void burbujaDNI(AlumnoConPromedio arr[], int n) {
		AlumnoConPromedio tmp;
		for (int i = 0; i < n - 1; i++)
			for (int j = 0; j < n - i - 1; j++)
				if (arr[j].dni > arr[j + 1].dni) {
					tmp = arr[j];
					arr[j] = arr[j + 1];
					arr[j + 1] = tmp;
		}
	}
	
	/* ====== Ordenamiento burbuja por promedio (descendente) ====== */
	void burbujaPromedios(AlumnoConPromedio arr[], int n) {
		AlumnoConPromedio tmp;
		for (int i = 0; i < n - 1; i++)
			for (int j = 0; j < n - i - 1; j++)
				if (arr[j].promedio < arr[j + 1].promedio) {
					tmp = arr[j];
					arr[j] = arr[j + 1];
					arr[j + 1] = tmp;
		}
	}
	
	/* ====== Búsqueda binaria por nombre (requiere burbujaNombre antes) ====== */
	int busquedaBinariaNombre(AlumnoConPromedio arr[], int n, char nombre[]) {
		int ini = 0, fin = n - 1, medio;
		while (ini <= fin) {
			medio = (ini + fin) / 2;
			int cmp = strcmp(nombre, arr[medio].nombre);
			if (cmp == 0) return medio;
			if (cmp < 0) fin = medio - 1;
			else ini = medio + 1;
		}
		return -1;
	}
	
	/* ====== Búsqueda binaria por DNI (requiere burbujaDNI antes) ====== */
	int busquedaBinariaDNI(AlumnoConPromedio arr[], int n, int dni) {
		int ini = 0, fin = n - 1, medio;
		while (ini <= fin) {
			medio = (ini + fin) / 2;
			if (dni == arr[medio].dni) return medio;
			if (dni < arr[medio].dni) fin = medio - 1;
			else ini = medio + 1;
		}
		return -1;
	}
	
	/* ====== Buscar alumno por nombre o DNI usando búsqueda binaria ====== */
	void buscar(Alumno *lista, Nota *notas) {
		if (lista == NULL) {
			printf("No hay alumnos cargados.\n");
			return;
		}
		
		AlumnoConPromedio arr[100];
		int total = copiarAlumnosAArray(lista, arr);
		
		int opcion;
		printf("\nBuscar por:\n1. Nombre\n2. DNI\nOpción: ");
		scanf("%d", &opcion);
		
		if (opcion == 1) {
			char nombre[50];
			printf("Ingrese el nombre del alumno: ");
			scanf("%s", nombre);
			burbujaNombre(arr, total);
			int pos = busquedaBinariaNombre(arr, total, nombre);
			if (pos != -1) {
				arr[pos].promedio = calcularPromedio(notas, arr[pos].nombre, arr[pos].materia);
				printf("\nResultado:\nNombre: %s\nDNI: %d\nMateria: %s\nPromedio: %.2f\n",
					   arr[pos].nombre, arr[pos].dni, arr[pos].materia, arr[pos].promedio);
			} else {
				printf("Alumno no encontrado.\n");
			}
		} else if (opcion == 2) {
			int dni;
			printf("Ingrese el DNI del alumno: ");
			scanf("%d", &dni);
			burbujaDNI(arr, total);
			int pos = busquedaBinariaDNI(arr, total, dni);
			if (pos != -1) {
				arr[pos].promedio = calcularPromedio(notas, arr[pos].nombre, arr[pos].materia);
				printf("\nResultado:\nNombre: %s\nDNI: %d\nMateria: %s\nPromedio: %.2f\n",
					   arr[pos].nombre, arr[pos].dni, arr[pos].materia, arr[pos].promedio);
			} else {
				printf("Alumno no encontrado.\n");
			}
		} else {
			printf("Opción inválida.\n");
		}
	}
	
	/* ====== Mostrar todos los alumnos ordenados por promedio (descendente) ====== */
	void mostrarPromediosOrdenados(Alumno *alumnos, Nota *notas) {
		if (alumnos == NULL) {
			printf("No hay alumnos cargados.\n");
			return;
		}
		
		AlumnoConPromedio arr[100];
		int total = copiarAlumnosAArray(alumnos, arr);
		
		for (int i = 0; i < total; i++) {
			arr[i].promedio = calcularPromedio(notas, arr[i].nombre, arr[i].materia);
		}
		
		burbujaPromedios(arr, total);
		
		printf("\n====== Promedios ordenados (de mayor a menor) ======\n");
		printf("%-20s | %-10s | %-15s | %-10s\n", "Nombre", "DNI", "Materia", "Promedio");
		printf("---------------------------------------------------------------\n");
		for (int i = 0; i < total; i++) {
			printf("%-20s | %-10d | %-15s | %-10.2f\n",
				   arr[i].nombre, arr[i].dni, arr[i].materia, arr[i].promedio);
		}
		printf("====================================================\n");
	}
	
	void guardarArchivo(FILE *arch, Materia *materias, Alumno *alumnos, Nota *notas) {
		arch = fopen(GDE, "w"); // Abrir en modo escritura (sobrescribe)
		if (arch == NULL) {
			printf("Error al guardar archivo.\n");
			return;
		}
		
		Materia *m = materias;
		while (m != NULL) {
			fprintf(arch, "Materia: %s\n", m->nombreM);
			m = m->sig;
		}
		
		Alumno *a = alumnos;
		while (a != NULL) {
			fprintf(arch, "Alumno: %s DNI: %d Materia: %s\n", a->nombre, a->dni, a->materiaAlum);
			a = a->sig;
		}
		
		Nota *n = notas;
		while (n != NULL) {
			fprintf(arch, "Nota: Alumno=%s Materia=%s Valor=%.2f\n", n->alumno, n->materia, n->valor);
			n = n->sig;
		}
		
		fclose(arch);
		printf("Datos guardados exitosamente.\n");
	}
